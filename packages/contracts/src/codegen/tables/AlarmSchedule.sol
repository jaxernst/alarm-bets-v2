// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("AlarmSchedule")))
);
ResourceId constant AlarmScheduleTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0019070104040104040404000000000000000000000000000000000000000000
);

struct AlarmScheduleData {
  uint32 alarmTime;
  uint32 submissionWindow;
  int8 timezoneOffset;
  uint32 activationTimestamp;
  uint32 lastEntryTime;
  uint32 alarmEntries;
  uint32 expiration;
  uint8[] alarmDays;
}

library AlarmSchedule {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](8);
    _valueSchema[0] = SchemaType.UINT32;
    _valueSchema[1] = SchemaType.UINT32;
    _valueSchema[2] = SchemaType.INT8;
    _valueSchema[3] = SchemaType.UINT32;
    _valueSchema[4] = SchemaType.UINT32;
    _valueSchema[5] = SchemaType.UINT32;
    _valueSchema[6] = SchemaType.UINT32;
    _valueSchema[7] = SchemaType.UINT8_ARRAY;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "key";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "alarmTime";
    fieldNames[1] = "submissionWindow";
    fieldNames[2] = "timezoneOffset";
    fieldNames[3] = "activationTimestamp";
    fieldNames[4] = "lastEntryTime";
    fieldNames[5] = "alarmEntries";
    fieldNames[6] = "expiration";
    fieldNames[7] = "alarmDays";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get alarmTime.
   */
  function getAlarmTime(bytes32 key) internal view returns (uint32 alarmTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get alarmTime.
   */
  function _getAlarmTime(bytes32 key) internal view returns (uint32 alarmTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set alarmTime.
   */
  function setAlarmTime(bytes32 key, uint32 alarmTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((alarmTime)), _fieldLayout);
  }

  /**
   * @notice Set alarmTime.
   */
  function _setAlarmTime(bytes32 key, uint32 alarmTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((alarmTime)), _fieldLayout);
  }

  /**
   * @notice Get submissionWindow.
   */
  function getSubmissionWindow(bytes32 key) internal view returns (uint32 submissionWindow) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get submissionWindow.
   */
  function _getSubmissionWindow(bytes32 key) internal view returns (uint32 submissionWindow) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set submissionWindow.
   */
  function setSubmissionWindow(bytes32 key, uint32 submissionWindow) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((submissionWindow)), _fieldLayout);
  }

  /**
   * @notice Set submissionWindow.
   */
  function _setSubmissionWindow(bytes32 key, uint32 submissionWindow) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((submissionWindow)), _fieldLayout);
  }

  /**
   * @notice Get timezoneOffset.
   */
  function getTimezoneOffset(bytes32 key) internal view returns (int8 timezoneOffset) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int8(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get timezoneOffset.
   */
  function _getTimezoneOffset(bytes32 key) internal view returns (int8 timezoneOffset) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int8(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set timezoneOffset.
   */
  function setTimezoneOffset(bytes32 key, int8 timezoneOffset) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((timezoneOffset)), _fieldLayout);
  }

  /**
   * @notice Set timezoneOffset.
   */
  function _setTimezoneOffset(bytes32 key, int8 timezoneOffset) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((timezoneOffset)), _fieldLayout);
  }

  /**
   * @notice Get activationTimestamp.
   */
  function getActivationTimestamp(bytes32 key) internal view returns (uint32 activationTimestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get activationTimestamp.
   */
  function _getActivationTimestamp(bytes32 key) internal view returns (uint32 activationTimestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set activationTimestamp.
   */
  function setActivationTimestamp(bytes32 key, uint32 activationTimestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((activationTimestamp)), _fieldLayout);
  }

  /**
   * @notice Set activationTimestamp.
   */
  function _setActivationTimestamp(bytes32 key, uint32 activationTimestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((activationTimestamp)), _fieldLayout);
  }

  /**
   * @notice Get lastEntryTime.
   */
  function getLastEntryTime(bytes32 key) internal view returns (uint32 lastEntryTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get lastEntryTime.
   */
  function _getLastEntryTime(bytes32 key) internal view returns (uint32 lastEntryTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set lastEntryTime.
   */
  function setLastEntryTime(bytes32 key, uint32 lastEntryTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((lastEntryTime)), _fieldLayout);
  }

  /**
   * @notice Set lastEntryTime.
   */
  function _setLastEntryTime(bytes32 key, uint32 lastEntryTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((lastEntryTime)), _fieldLayout);
  }

  /**
   * @notice Get alarmEntries.
   */
  function getAlarmEntries(bytes32 key) internal view returns (uint32 alarmEntries) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get alarmEntries.
   */
  function _getAlarmEntries(bytes32 key) internal view returns (uint32 alarmEntries) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set alarmEntries.
   */
  function setAlarmEntries(bytes32 key, uint32 alarmEntries) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((alarmEntries)), _fieldLayout);
  }

  /**
   * @notice Set alarmEntries.
   */
  function _setAlarmEntries(bytes32 key, uint32 alarmEntries) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((alarmEntries)), _fieldLayout);
  }

  /**
   * @notice Get expiration.
   */
  function getExpiration(bytes32 key) internal view returns (uint32 expiration) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get expiration.
   */
  function _getExpiration(bytes32 key) internal view returns (uint32 expiration) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set expiration.
   */
  function setExpiration(bytes32 key, uint32 expiration) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((expiration)), _fieldLayout);
  }

  /**
   * @notice Set expiration.
   */
  function _setExpiration(bytes32 key, uint32 expiration) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((expiration)), _fieldLayout);
  }

  /**
   * @notice Get alarmDays.
   */
  function getAlarmDays(bytes32 key) internal view returns (uint8[] memory alarmDays) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint8());
  }

  /**
   * @notice Get alarmDays.
   */
  function _getAlarmDays(bytes32 key) internal view returns (uint8[] memory alarmDays) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint8());
  }

  /**
   * @notice Set alarmDays.
   */
  function setAlarmDays(bytes32 key, uint8[] memory alarmDays) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((alarmDays)));
  }

  /**
   * @notice Set alarmDays.
   */
  function _setAlarmDays(bytes32 key, uint8[] memory alarmDays) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((alarmDays)));
  }

  /**
   * @notice Get the length of alarmDays.
   */
  function lengthAlarmDays(bytes32 key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of alarmDays.
   */
  function _lengthAlarmDays(bytes32 key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of alarmDays.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemAlarmDays(bytes32 key, uint256 _index) internal view returns (uint8) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (uint8(bytes1(_blob)));
    }
  }

  /**
   * @notice Get an item of alarmDays.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemAlarmDays(bytes32 key, uint256 _index) internal view returns (uint8) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (uint8(bytes1(_blob)));
    }
  }

  /**
   * @notice Push an element to alarmDays.
   */
  function pushAlarmDays(bytes32 key, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to alarmDays.
   */
  function _pushAlarmDays(bytes32 key, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from alarmDays.
   */
  function popAlarmDays(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop an element from alarmDays.
   */
  function _popAlarmDays(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update an element of alarmDays at `_index`.
   */
  function updateAlarmDays(bytes32 key, uint256 _index, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of alarmDays at `_index`.
   */
  function _updateAlarmDays(bytes32 key, uint256 _index, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 key) internal view returns (AlarmScheduleData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 key) internal view returns (AlarmScheduleData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 key,
    uint32 alarmTime,
    uint32 submissionWindow,
    int8 timezoneOffset,
    uint32 activationTimestamp,
    uint32 lastEntryTime,
    uint32 alarmEntries,
    uint32 expiration,
    uint8[] memory alarmDays
  ) internal {
    bytes memory _staticData = encodeStatic(
      alarmTime,
      submissionWindow,
      timezoneOffset,
      activationTimestamp,
      lastEntryTime,
      alarmEntries,
      expiration
    );

    PackedCounter _encodedLengths = encodeLengths(alarmDays);
    bytes memory _dynamicData = encodeDynamic(alarmDays);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 key,
    uint32 alarmTime,
    uint32 submissionWindow,
    int8 timezoneOffset,
    uint32 activationTimestamp,
    uint32 lastEntryTime,
    uint32 alarmEntries,
    uint32 expiration,
    uint8[] memory alarmDays
  ) internal {
    bytes memory _staticData = encodeStatic(
      alarmTime,
      submissionWindow,
      timezoneOffset,
      activationTimestamp,
      lastEntryTime,
      alarmEntries,
      expiration
    );

    PackedCounter _encodedLengths = encodeLengths(alarmDays);
    bytes memory _dynamicData = encodeDynamic(alarmDays);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 key, AlarmScheduleData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.alarmTime,
      _table.submissionWindow,
      _table.timezoneOffset,
      _table.activationTimestamp,
      _table.lastEntryTime,
      _table.alarmEntries,
      _table.expiration
    );

    PackedCounter _encodedLengths = encodeLengths(_table.alarmDays);
    bytes memory _dynamicData = encodeDynamic(_table.alarmDays);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 key, AlarmScheduleData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.alarmTime,
      _table.submissionWindow,
      _table.timezoneOffset,
      _table.activationTimestamp,
      _table.lastEntryTime,
      _table.alarmEntries,
      _table.expiration
    );

    PackedCounter _encodedLengths = encodeLengths(_table.alarmDays);
    bytes memory _dynamicData = encodeDynamic(_table.alarmDays);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint32 alarmTime,
      uint32 submissionWindow,
      int8 timezoneOffset,
      uint32 activationTimestamp,
      uint32 lastEntryTime,
      uint32 alarmEntries,
      uint32 expiration
    )
  {
    alarmTime = (uint32(Bytes.slice4(_blob, 0)));

    submissionWindow = (uint32(Bytes.slice4(_blob, 4)));

    timezoneOffset = (int8(uint8(Bytes.slice1(_blob, 8))));

    activationTimestamp = (uint32(Bytes.slice4(_blob, 9)));

    lastEntryTime = (uint32(Bytes.slice4(_blob, 13)));

    alarmEntries = (uint32(Bytes.slice4(_blob, 17)));

    expiration = (uint32(Bytes.slice4(_blob, 21)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    PackedCounter _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint8[] memory alarmDays) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    alarmDays = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint8());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    PackedCounter _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (AlarmScheduleData memory _table) {
    (
      _table.alarmTime,
      _table.submissionWindow,
      _table.timezoneOffset,
      _table.activationTimestamp,
      _table.lastEntryTime,
      _table.alarmEntries,
      _table.expiration
    ) = decodeStatic(_staticData);

    (_table.alarmDays) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint32 alarmTime,
    uint32 submissionWindow,
    int8 timezoneOffset,
    uint32 activationTimestamp,
    uint32 lastEntryTime,
    uint32 alarmEntries,
    uint32 expiration
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        alarmTime,
        submissionWindow,
        timezoneOffset,
        activationTimestamp,
        lastEntryTime,
        alarmEntries,
        expiration
      );
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(uint8[] memory alarmDays) internal pure returns (PackedCounter _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(alarmDays.length * 1);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(uint8[] memory alarmDays) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((alarmDays)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint32 alarmTime,
    uint32 submissionWindow,
    int8 timezoneOffset,
    uint32 activationTimestamp,
    uint32 lastEntryTime,
    uint32 alarmEntries,
    uint32 expiration,
    uint8[] memory alarmDays
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(
      alarmTime,
      submissionWindow,
      timezoneOffset,
      activationTimestamp,
      lastEntryTime,
      alarmEntries,
      expiration
    );

    PackedCounter _encodedLengths = encodeLengths(alarmDays);
    bytes memory _dynamicData = encodeDynamic(alarmDays);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    return _keyTuple;
  }
}
